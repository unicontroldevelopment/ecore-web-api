// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employees {
  id               Int      @id @default(autoincrement())
  name             String
  role             String?
  password         String?
  department       String?
  company          String?
  unit             String?
  networkUser      String?
  networkPassword  String?
  email            String   @unique
  emailPassword    String?
  discordEmail     String?
  discordPassword  String?
  notebookBrand    String?
  notebookName     String?
  notebookProperty String?
  coolerProperty   String?
  officeVersion    String?
  windowsVersion   String?
  created          DateTime @default(now())
  updated          DateTime @updatedAt

  ServerAccess ServerAccess[]

  @@map("employees")
}

model ServerAccess {
  id                Int       @id @default(autoincrement())
  fitolog           Boolean
  commercial        Boolean
  administrative    Boolean
  humanResources    Boolean
  technician        Boolean
  newsis            Boolean
  marketing         Boolean
  projects          Boolean
  managementControl Boolean
  trainings         Boolean
  it                Boolean
  temp              Boolean
  franchises        Boolean
  created           DateTime  @default(now())
  updated           DateTime  @updatedAt
  employeeId        Int
  Employees         Employees @relation(fields: [employeeId], references: [id])

  @@map("serverAccess")
}

model Emails {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  type     String
  created  DateTime @default(now())
  updated  DateTime @updatedAt

  Redirects Redirects[]

  @@map("email")
}

model Redirects {
  id       Int      @id @default(autoincrement())
  email    String
  created  DateTime @default(now())
  updated  DateTime @updatedAt
  email_id Int
  Emails   Emails   @relation(fields: [email_id], references: [id])

  @@map("redirects")
}

model Contracts {
  id             Int      @id @default(autoincrement())
  cpfcnpj        String
  cep            String
  road           String
  number         Int
  complement     String?
  neighborhood   String
  city           String
  tecSignature   String
  contractNumber Int
  date           DateTime
  value          Decimal  @db.Decimal(8, 2)
  index          String
  created        DateTime @default(now())
  updated        DateTime @updatedAt

  contracs_Service Contract_Service[]
  clauses          Clauses[]

  @@map("contracts")
}

model Clauses {
  id          Int       @id @default(autoincrement())
  clause1     String
  clause2     String
  clause3     String
  clause4     String
  clause5     String
  clause6     String
  clause7     String
  clause8     String
  clause9     String
  clause10    String
  contract_id Int
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  Contracts   Contracts @relation(fields: [contract_id], references: [id])

  @@map("clauses")
}

model Contract_Service {
  id          Int       @id @default(autoincrement())
  contract_id Int
  service_id  Int
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  Services    Services  @relation(fields: [service_id], references: [id])
  Contracts   Contracts @relation(fields: [contract_id], references: [id])

  @@map("contract_service")
}

model Services {
  id          Int      @id @default(autoincrement())
  description String
  code        String
  created     DateTime @default(now())
  updated     DateTime @updatedAt

  contracs_Service Contract_Service[]

  @@map("services")
}
